/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_vue_entries_admin_segment_edit_ts"] = self["webpackChunk_vue_entries_admin_segment_edit_ts"] || []).push([["vendors-node_modules_js-video-url-parser_dist_jsVideoUrlParser_js"],{

/***/ "../../../../node_modules/js-video-url-parser/dist/jsVideoUrlParser.js":
/*!*****************************************************************************!*\
  !*** ../../../../node_modules/js-video-url-parser/dist/jsVideoUrlParser.js ***!
  \*****************************************************************************/
/***/ (function(module) {

eval("(function (global, factory) {\n   true ? module.exports = factory() :\n  0;\n}(this, (function () { 'use strict';\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  var getQueryParams = function getQueryParams(qs) {\n    if (typeof qs !== 'string') {\n      return {};\n    }\n\n    qs = qs.split('+').join(' ');\n    var params = {};\n    var match = qs.match(/(?:[?](?:[^=]+)=(?:[^&#]*)(?:[&](?:[^=]+)=(?:[^&#]*))*(?:[#].*)?)|(?:[#].*)/);\n    var split;\n\n    if (match === null) {\n      return {};\n    }\n\n    split = match[0].substr(1).split(/[&#=]/);\n\n    for (var i = 0; i < split.length; i += 2) {\n      params[decodeURIComponent(split[i])] = decodeURIComponent(split[i + 1] || '');\n    }\n\n    return params;\n  };\n\n  var combineParams = function combineParams(params, hasParams) {\n    if (_typeof(params) !== 'object') {\n      return '';\n    }\n\n    var combined = '';\n    var i = 0;\n    var keys = Object.keys(params);\n\n    if (keys.length === 0) {\n      return '';\n    } //always have parameters in the same order\n\n\n    keys.sort();\n\n    if (!hasParams) {\n      combined += '?' + keys[0] + '=' + params[keys[0]];\n      i += 1;\n    }\n\n    for (; i < keys.length; i += 1) {\n      combined += '&' + keys[i] + '=' + params[keys[i]];\n    }\n\n    return combined;\n  }; //parses strings like 1h30m20s to seconds\n\n\n  function getLetterTime(timeString) {\n    var totalSeconds = 0;\n    var timeValues = {\n      's': 1,\n      'm': 1 * 60,\n      'h': 1 * 60 * 60,\n      'd': 1 * 60 * 60 * 24,\n      'w': 1 * 60 * 60 * 24 * 7\n    };\n    var timePairs; //expand to \"1 h 30 m 20 s\" and split\n\n    timeString = timeString.replace(/([smhdw])/g, ' $1 ').trim();\n    timePairs = timeString.split(' ');\n\n    for (var i = 0; i < timePairs.length; i += 2) {\n      totalSeconds += parseInt(timePairs[i], 10) * timeValues[timePairs[i + 1] || 's'];\n    }\n\n    return totalSeconds;\n  } //parses strings like 1:30:20 to seconds\n\n\n  function getColonTime(timeString) {\n    var totalSeconds = 0;\n    var timeValues = [1, 1 * 60, 1 * 60 * 60, 1 * 60 * 60 * 24, 1 * 60 * 60 * 24 * 7];\n    var timePairs = timeString.split(':');\n\n    for (var i = 0; i < timePairs.length; i++) {\n      totalSeconds += parseInt(timePairs[i], 10) * timeValues[timePairs.length - i - 1];\n    }\n\n    return totalSeconds;\n  }\n\n  var getTime = function getTime(timeString) {\n    if (typeof timeString === 'undefined') {\n      return 0;\n    }\n\n    if (timeString.match(/^(\\d+[smhdw]?)+$/)) {\n      return getLetterTime(timeString);\n    }\n\n    if (timeString.match(/^(\\d+:?)+$/)) {\n      return getColonTime(timeString);\n    }\n\n    return 0;\n  };\n\n  var util = {\n    getQueryParams: getQueryParams,\n    combineParams: combineParams,\n    getTime: getTime\n  };\n\n  var getQueryParams$1 = util.getQueryParams;\n\n  function UrlParser() {\n    for (var _i = 0, _arr = ['parseProvider', 'parse', 'bind', 'create']; _i < _arr.length; _i++) {\n      var key = _arr[_i];\n      this[key] = this[key].bind(this);\n    }\n\n    this.plugins = {};\n  }\n\n  var urlParser = UrlParser;\n\n  UrlParser.prototype.parseProvider = function (url) {\n    var match = url.match(/(?:(?:https?:)?\\/\\/)?(?:[^.]+\\.)?(\\w+)\\./i);\n    return match ? match[1] : undefined;\n  };\n\n  UrlParser.prototype.parse = function (url) {\n    if (typeof url === 'undefined') {\n      return undefined;\n    }\n\n    var provider = this.parseProvider(url);\n    var result;\n    var plugin = this.plugins[provider];\n\n    if (!provider || !plugin || !plugin.parse) {\n      return undefined;\n    }\n\n    result = plugin.parse.call(plugin, url, getQueryParams$1(url));\n\n    if (result) {\n      result = removeEmptyParameters(result);\n      result.provider = plugin.provider;\n    }\n\n    return result;\n  };\n\n  UrlParser.prototype.bind = function (plugin) {\n    this.plugins[plugin.provider] = plugin;\n\n    if (plugin.alternatives) {\n      for (var i = 0; i < plugin.alternatives.length; i += 1) {\n        this.plugins[plugin.alternatives[i]] = plugin;\n      }\n    }\n  };\n\n  UrlParser.prototype.create = function (op) {\n    if (_typeof(op) !== 'object' || _typeof(op.videoInfo) !== 'object') {\n      return undefined;\n    }\n\n    var vi = op.videoInfo;\n    var params = op.params;\n    var plugin = this.plugins[vi.provider];\n    params = params === 'internal' ? vi.params : params || {};\n\n    if (plugin) {\n      op.format = op.format || plugin.defaultFormat; // eslint-disable-next-line no-prototype-builtins\n\n      if (plugin.formats.hasOwnProperty(op.format)) {\n        return plugin.formats[op.format].apply(plugin, [vi, Object.assign({}, params)]);\n      }\n    }\n\n    return undefined;\n  };\n\n  function removeEmptyParameters(result) {\n    if (result.params && Object.keys(result.params).length === 0) {\n      delete result.params;\n    }\n\n    return result;\n  }\n\n  var parser = new urlParser();\n  var base = parser;\n\n  function Allocine() {\n    this.provider = 'allocine';\n    this.alternatives = [];\n    this.defaultFormat = 'embed';\n    this.formats = {\n      embed: this.createEmbedUrl\n    };\n    this.mediaTypes = {\n      VIDEO: 'video'\n    };\n  }\n\n  Allocine.prototype.parseUrl = function (url) {\n    var match = url.match(/(?:\\/video\\/player_gen_cmedia=)([A-Za-z0-9]+)/i);\n    return match ? match[1] : undefined;\n  };\n\n  Allocine.prototype.parse = function (url) {\n    var result = {\n      mediaType: this.mediaTypes.VIDEO,\n      id: this.parseUrl(url)\n    };\n    return result.id ? result : undefined;\n  };\n\n  Allocine.prototype.createEmbedUrl = function (vi) {\n    if (!vi.id || vi.mediaType !== this.mediaTypes.VIDEO) {\n      return undefined;\n    }\n\n    return 'https://player.allocine.fr/' + vi.id + '.html';\n  };\n\n  base.bind(new Allocine());\n\n  var combineParams$1 = util.combineParams;\n\n  function CanalPlus() {\n    this.provider = 'canalplus';\n    this.defaultFormat = 'embed';\n    this.formats = {\n      embed: this.createEmbedUrl\n    };\n    this.mediaTypes = {\n      VIDEO: 'video'\n    };\n  }\n\n  CanalPlus.prototype.parseParameters = function (params) {\n    delete params.vid;\n    return params;\n  };\n\n  CanalPlus.prototype.parse = function (url, params) {\n    var _this = this;\n\n    var result = {\n      mediaType: this.mediaTypes.VIDEO,\n      id: params.vid\n    };\n    result.params = _this.parseParameters(params);\n\n    if (!result.id) {\n      return undefined;\n    }\n\n    return result;\n  };\n\n  CanalPlus.prototype.createEmbedUrl = function (vi, params) {\n    if (!vi.id || vi.mediaType !== this.mediaTypes.VIDEO) {\n      return undefined;\n    }\n\n    var url = 'http://player.canalplus.fr/embed/';\n    params.vid = vi.id;\n    url += combineParams$1(params);\n    return url;\n  };\n\n  base.bind(new CanalPlus());\n\n  var combineParams$2 = util.combineParams;\n\n  function Coub() {\n    this.provider = 'coub';\n    this.defaultFormat = 'long';\n    this.formats = {\n      \"long\": this.createLongUrl,\n      embed: this.createEmbedUrl\n    };\n    this.mediaTypes = {\n      VIDEO: 'video'\n    };\n  }\n\n  Coub.prototype.parseUrl = function (url) {\n    var match = url.match(/(?:embed|view)\\/([a-zA-Z\\d]+)/i);\n    return match ? match[1] : undefined;\n  };\n\n  Coub.prototype.parse = function (url, params) {\n    var result = {\n      mediaType: this.mediaTypes.VIDEO,\n      params: params,\n      id: this.parseUrl(url)\n    };\n\n    if (!result.id) {\n      return undefined;\n    }\n\n    return result;\n  };\n\n  Coub.prototype.createUrl = function (baseUrl, vi, params) {\n    if (!vi.id || vi.mediaType !== this.mediaTypes.VIDEO) {\n      return undefined;\n    }\n\n    var url = baseUrl + vi.id;\n    url += combineParams$2(params);\n    return url;\n  };\n\n  Coub.prototype.createLongUrl = function (vi, params) {\n    return this.createUrl('https://coub.com/view/', vi, params);\n  };\n\n  Coub.prototype.createEmbedUrl = function (vi, params) {\n    return this.createUrl('//coub.com/embed/', vi, params);\n  };\n\n  base.bind(new Coub());\n\n  var combineParams$3 = util.combineParams,\n      getTime$1 = util.getTime;\n\n  function Dailymotion() {\n    this.provider = 'dailymotion';\n    this.alternatives = ['dai'];\n    this.defaultFormat = 'long';\n    this.formats = {\n      \"short\": this.createShortUrl,\n      \"long\": this.createLongUrl,\n      embed: this.createEmbedUrl,\n      image: this.createImageUrl\n    };\n    this.mediaTypes = {\n      VIDEO: 'video'\n    };\n  }\n\n  Dailymotion.prototype.parseParameters = function (params) {\n    return this.parseTime(params);\n  };\n\n  Dailymotion.prototype.parseTime = function (params) {\n    if (params.start) {\n      params.start = getTime$1(params.start);\n    }\n\n    return params;\n  };\n\n  Dailymotion.prototype.parseUrl = function (url) {\n    var match = url.match(/(?:\\/video|ly)\\/([A-Za-z0-9]+)/i);\n    return match ? match[1] : undefined;\n  };\n\n  Dailymotion.prototype.parse = function (url, params) {\n    var _this = this;\n\n    var result = {\n      mediaType: this.mediaTypes.VIDEO,\n      params: _this.parseParameters(params),\n      id: _this.parseUrl(url)\n    };\n    return result.id ? result : undefined;\n  };\n\n  Dailymotion.prototype.createUrl = function (base, vi, params) {\n    if (!vi.id || vi.mediaType !== this.mediaTypes.VIDEO) {\n      return undefined;\n    }\n\n    return base + vi.id + combineParams$3(params);\n  };\n\n  Dailymotion.prototype.createShortUrl = function (vi, params) {\n    return this.createUrl('https://dai.ly/', vi, params);\n  };\n\n  Dailymotion.prototype.createLongUrl = function (vi, params) {\n    return this.createUrl('https://dailymotion.com/video/', vi, params);\n  };\n\n  Dailymotion.prototype.createEmbedUrl = function (vi, params) {\n    return this.createUrl('https://www.dailymotion.com/embed/video/', vi, params);\n  };\n\n  Dailymotion.prototype.createImageUrl = function (vi, params) {\n    delete params.start;\n    return this.createUrl('https://www.dailymotion.com/thumbnail/video/', vi, params);\n  };\n\n  base.bind(new Dailymotion());\n\n  var combineParams$4 = util.combineParams;\n\n  function Loom() {\n    this.provider = 'loom';\n    this.defaultFormat = 'long';\n    this.formats = {\n      \"long\": this.createLongUrl,\n      embed: this.createEmbedUrl\n    };\n    this.mediaTypes = {\n      VIDEO: 'video'\n    };\n  }\n\n  Loom.prototype.parseUrl = function (url) {\n    var match = url.match(/(?:share|embed)\\/([a-zA-Z\\d]+)/i);\n    return match ? match[1] : undefined;\n  };\n\n  Loom.prototype.parse = function (url, params) {\n    var result = {\n      mediaType: this.mediaTypes.VIDEO,\n      params: params,\n      id: this.parseUrl(url)\n    };\n    return result.id ? result : undefined;\n  };\n\n  Loom.prototype.createUrl = function (baseUrl, vi, params) {\n    if (!vi.id || vi.mediaType !== this.mediaTypes.VIDEO) {\n      return undefined;\n    }\n\n    var url = baseUrl + vi.id;\n    url += combineParams$4(params);\n    return url;\n  };\n\n  Loom.prototype.createLongUrl = function (vi, params) {\n    return this.createUrl('https://loom.com/share/', vi, params);\n  };\n\n  Loom.prototype.createEmbedUrl = function (vi, params) {\n    return this.createUrl('//loom.com/embed/', vi, params);\n  };\n\n  base.bind(new Loom());\n\n  var combineParams$5 = util.combineParams,\n      getTime$2 = util.getTime;\n\n  function Twitch() {\n    this.provider = 'twitch';\n    this.defaultFormat = 'long';\n    this.formats = {\n      \"long\": this.createLongUrl,\n      embed: this.createEmbedUrl\n    };\n    this.mediaTypes = {\n      VIDEO: 'video',\n      STREAM: 'stream',\n      CLIP: 'clip'\n    };\n  }\n\n  Twitch.prototype.seperateId = function (id) {\n    return {\n      pre: id[0],\n      id: id.substr(1)\n    };\n  };\n\n  Twitch.prototype.parseChannel = function (result, params) {\n    var channel = params.channel || params.utm_content || result.channel;\n    delete params.utm_content;\n    delete params.channel;\n    return channel;\n  };\n\n  Twitch.prototype.parseUrl = function (url, result, params) {\n    var match;\n    match = url.match(/(clips\\.)?twitch\\.tv\\/(?:(?:videos\\/(\\d+))|(\\w+(?:-[\\w\\d-]+)?)(?:\\/clip\\/(\\w+))?)/i);\n\n    if (match && match[2]) {\n      //video\n      result.id = 'v' + match[2];\n    } else if (params.video) {\n      //video embed\n      result.id = params.video;\n      delete params.video;\n    } else if (params.clip) {\n      //clips embed\n      result.id = params.clip;\n      result.isClip = true;\n      delete params.clip;\n    } else if (match && match[1] && match[3]) {\n      //clips.twitch.tv/id\n      result.id = match[3];\n      result.isClip = true;\n    } else if (match && match[3] && match[4]) {\n      //twitch.tv/channel/clip/id\n      result.channel = match[3];\n      result.id = match[4];\n      result.isClip = true;\n    } else if (match && match[3]) {\n      result.channel = match[3];\n    }\n\n    return result;\n  };\n\n  Twitch.prototype.parseMediaType = function (result) {\n    var mediaType;\n\n    if (result.id) {\n      if (result.isClip) {\n        mediaType = this.mediaTypes.CLIP;\n        delete result.isClip;\n      } else {\n        mediaType = this.mediaTypes.VIDEO;\n      }\n    } else if (result.channel) {\n      mediaType = this.mediaTypes.STREAM;\n    }\n\n    return mediaType;\n  };\n\n  Twitch.prototype.parseParameters = function (params) {\n    if (params.t) {\n      params.start = getTime$2(params.t);\n      delete params.t;\n    }\n\n    return params;\n  };\n\n  Twitch.prototype.parse = function (url, params) {\n    var _this = this;\n\n    var result = {};\n    result = _this.parseUrl(url, result, params);\n    result.channel = _this.parseChannel(result, params);\n    result.mediaType = _this.parseMediaType(result);\n    result.params = _this.parseParameters(params);\n    return result.channel || result.id ? result : undefined;\n  };\n\n  Twitch.prototype.createLongUrl = function (vi, params) {\n    var url = '';\n\n    if (vi.mediaType === this.mediaTypes.STREAM && vi.channel) {\n      url = 'https://twitch.tv/' + vi.channel;\n    } else if (vi.mediaType === this.mediaTypes.VIDEO && vi.id) {\n      var sep = this.seperateId(vi.id);\n      url = 'https://twitch.tv/videos/' + sep.id;\n\n      if (params.start) {\n        params.t = params.start + 's';\n        delete params.start;\n      }\n    } else if (vi.mediaType === this.mediaTypes.CLIP && vi.id) {\n      if (vi.channel) {\n        url = 'https://www.twitch.tv/' + vi.channel + '/clip/' + vi.id;\n      } else {\n        url = 'https://clips.twitch.tv/' + vi.id;\n      }\n    } else {\n      return undefined;\n    }\n\n    url += combineParams$5(params);\n    return url;\n  };\n\n  Twitch.prototype.createEmbedUrl = function (vi, params) {\n    var url = 'https://player.twitch.tv/';\n\n    if (vi.mediaType === this.mediaTypes.STREAM && vi.channel) {\n      params.channel = vi.channel;\n    } else if (vi.mediaType === this.mediaTypes.VIDEO && vi.id) {\n      params.video = vi.id;\n\n      if (params.start) {\n        params.t = params.start + 's';\n        delete params.start;\n      }\n    } else if (vi.mediaType === this.mediaTypes.CLIP && vi.id) {\n      url = 'https://clips.twitch.tv/embed';\n      params.clip = vi.id;\n    } else {\n      return undefined;\n    }\n\n    url += combineParams$5(params);\n    return url;\n  };\n\n  base.bind(new Twitch());\n\n  var combineParams$6 = util.combineParams,\n      getTime$3 = util.getTime;\n\n  function Vimeo() {\n    this.provider = 'vimeo';\n    this.alternatives = ['vimeopro'];\n    this.defaultFormat = 'long';\n    this.formats = {\n      \"long\": this.createLongUrl,\n      embed: this.createEmbedUrl\n    };\n    this.mediaTypes = {\n      VIDEO: 'video'\n    };\n  }\n\n  Vimeo.prototype.parseUrl = function (url) {\n    var match = url.match(/(?:\\/showcase\\/\\d+)?(?:\\/(?:channels\\/[\\w]+|(?:(?:album\\/\\d+|groups\\/[\\w]+)\\/)?videos?))?\\/(\\d+)/i);\n    return match ? match[1] : undefined;\n  };\n\n  Vimeo.prototype.parseHash = function (url) {\n    var match = url.match(/\\/\\d+\\/(\\w+)$/i);\n    return match ? match[1] : undefined;\n  };\n\n  Vimeo.prototype.parseParameters = function (params) {\n    if (params.t) {\n      params.start = getTime$3(params.t);\n      delete params.t;\n    }\n\n    if (params.h) {\n      params.hash = params.h;\n      delete params.h;\n    }\n\n    return params;\n  };\n\n  Vimeo.prototype.parse = function (url, params) {\n    var result = {\n      mediaType: this.mediaTypes.VIDEO,\n      params: this.parseParameters(params),\n      id: this.parseUrl(url)\n    };\n    var hash = this.parseHash(url, params);\n\n    if (hash) {\n      result.params.hash = hash;\n    }\n\n    return result.id ? result : undefined;\n  };\n\n  Vimeo.prototype.createUrl = function (baseUrl, vi, params, type) {\n    if (!vi.id || vi.mediaType !== this.mediaTypes.VIDEO) {\n      return undefined;\n    }\n\n    var url = baseUrl + vi.id;\n    var startTime = params.start;\n    delete params.start;\n\n    if (params.hash) {\n      if (type === 'embed') {\n        params.h = params.hash;\n      } else if (type === 'long') {\n        url += '/' + params.hash;\n      }\n\n      delete params.hash;\n    }\n\n    url += combineParams$6(params);\n\n    if (startTime) {\n      url += '#t=' + startTime;\n    }\n\n    return url;\n  };\n\n  Vimeo.prototype.createLongUrl = function (vi, params) {\n    return this.createUrl('https://vimeo.com/', vi, params, 'long');\n  };\n\n  Vimeo.prototype.createEmbedUrl = function (vi, params) {\n    return this.createUrl('//player.vimeo.com/video/', vi, params, 'embed');\n  };\n\n  base.bind(new Vimeo());\n\n  var combineParams$7 = util.combineParams,\n      getTime$4 = util.getTime;\n\n  function Wistia() {\n    this.provider = 'wistia';\n    this.alternatives = [];\n    this.defaultFormat = 'long';\n    this.formats = {\n      \"long\": this.createLongUrl,\n      embed: this.createEmbedUrl,\n      embedjsonp: this.createEmbedJsonpUrl\n    };\n    this.mediaTypes = {\n      VIDEO: 'video',\n      EMBEDVIDEO: 'embedvideo'\n    };\n  }\n\n  Wistia.prototype.parseUrl = function (url) {\n    var match = url.match(/(?:(?:medias|iframe)\\/|wvideo=)([\\w-]+)/);\n    return match ? match[1] : undefined;\n  };\n\n  Wistia.prototype.parseChannel = function (url) {\n    var match = url.match(/(?:(?:https?:)?\\/\\/)?([^.]*)\\.wistia\\./);\n    var channel = match ? match[1] : undefined;\n\n    if (channel === 'fast' || channel === 'content') {\n      return undefined;\n    }\n\n    return channel;\n  };\n\n  Wistia.prototype.parseParameters = function (params, result) {\n    if (params.wtime) {\n      params.start = getTime$4(params.wtime);\n      delete params.wtime;\n    }\n\n    if (params.wvideo === result.id) {\n      delete params.wvideo;\n    }\n\n    return params;\n  };\n\n  Wistia.prototype.parseMediaType = function (result) {\n    if (result.id && result.channel) {\n      return this.mediaTypes.VIDEO;\n    } else if (result.id) {\n      delete result.channel;\n      return this.mediaTypes.EMBEDVIDEO;\n    } else {\n      return undefined;\n    }\n  };\n\n  Wistia.prototype.parse = function (url, params) {\n    var result = {\n      id: this.parseUrl(url),\n      channel: this.parseChannel(url)\n    };\n    result.params = this.parseParameters(params, result);\n    result.mediaType = this.parseMediaType(result);\n\n    if (!result.id) {\n      return undefined;\n    }\n\n    return result;\n  };\n\n  Wistia.prototype.createUrl = function (vi, params, url) {\n    if (params.start) {\n      params.wtime = params.start;\n      delete params.start;\n    }\n\n    url += combineParams$7(params);\n    return url;\n  };\n\n  Wistia.prototype.createLongUrl = function (vi, params) {\n    if (!vi.id || vi.mediaType !== this.mediaTypes.VIDEO) {\n      return undefined;\n    }\n\n    var url = 'https://' + vi.channel + '.wistia.com/medias/' + vi.id;\n    return this.createUrl(vi, params, url);\n  };\n\n  Wistia.prototype.createEmbedUrl = function (vi, params) {\n    if (!vi.id || !(vi.mediaType === this.mediaTypes.VIDEO || vi.mediaType === this.mediaTypes.EMBEDVIDEO)) {\n      return undefined;\n    }\n\n    var url = 'https://fast.wistia.com/embed/iframe/' + vi.id;\n    return this.createUrl(vi, params, url);\n  };\n\n  Wistia.prototype.createEmbedJsonpUrl = function (vi) {\n    if (!vi.id || !(vi.mediaType === this.mediaTypes.VIDEO || vi.mediaType === this.mediaTypes.EMBEDVIDEO)) {\n      return undefined;\n    }\n\n    return 'https://fast.wistia.com/embed/medias/' + vi.id + '.jsonp';\n  };\n\n  base.bind(new Wistia());\n\n  var combineParams$8 = util.combineParams;\n\n  function Youku() {\n    this.provider = 'youku';\n    this.defaultFormat = 'long';\n    this.formats = {\n      embed: this.createEmbedUrl,\n      \"long\": this.createLongUrl,\n      flash: this.createFlashUrl,\n      \"static\": this.createStaticUrl\n    };\n    this.mediaTypes = {\n      VIDEO: 'video'\n    };\n  }\n\n  Youku.prototype.parseUrl = function (url) {\n    var match = url.match(/(?:(?:embed|sid)\\/|v_show\\/id_|VideoIDS=)([a-zA-Z0-9]+)/);\n    return match ? match[1] : undefined;\n  };\n\n  Youku.prototype.parseParameters = function (params) {\n    if (params.VideoIDS) {\n      delete params.VideoIDS;\n    }\n\n    return params;\n  };\n\n  Youku.prototype.parse = function (url, params) {\n    var _this = this;\n\n    var result = {\n      mediaType: this.mediaTypes.VIDEO,\n      id: _this.parseUrl(url),\n      params: _this.parseParameters(params)\n    };\n\n    if (!result.id) {\n      return undefined;\n    }\n\n    return result;\n  };\n\n  Youku.prototype.createUrl = function (baseUrl, vi, params) {\n    if (!vi.id || vi.mediaType !== this.mediaTypes.VIDEO) {\n      return undefined;\n    }\n\n    var url = baseUrl + vi.id;\n    url += combineParams$8(params);\n    return url;\n  };\n\n  Youku.prototype.createEmbedUrl = function (vi, params) {\n    return this.createUrl('http://player.youku.com/embed/', vi, params);\n  };\n\n  Youku.prototype.createLongUrl = function (vi, params) {\n    return this.createUrl('http://v.youku.com/v_show/id_', vi, params);\n  };\n\n  Youku.prototype.createStaticUrl = function (vi, params) {\n    return this.createUrl('http://static.youku.com/v1.0.0638/v/swf/loader.swf?VideoIDS=', vi, params);\n  };\n\n  Youku.prototype.createFlashUrl = function (vi, params) {\n    if (!vi.id || vi.mediaType !== this.mediaTypes.VIDEO) {\n      return undefined;\n    }\n\n    var url = 'http://player.youku.com/player.php/sid/' + vi.id + '/v.swf';\n    url += combineParams$8(params);\n    return url;\n  };\n\n  base.bind(new Youku());\n\n  var combineParams$9 = util.combineParams,\n      getTime$5 = util.getTime;\n\n  function YouTube() {\n    this.provider = 'youtube';\n    this.alternatives = ['youtu', 'ytimg'];\n    this.defaultFormat = 'long';\n    this.formats = {\n      \"short\": this.createShortUrl,\n      \"long\": this.createLongUrl,\n      embed: this.createEmbedUrl,\n      shortImage: this.createShortImageUrl,\n      longImage: this.createLongImageUrl\n    };\n    this.imageQualities = {\n      '0': '0',\n      '1': '1',\n      '2': '2',\n      '3': '3',\n      DEFAULT: 'default',\n      HQDEFAULT: 'hqdefault',\n      SDDEFAULT: 'sddefault',\n      MQDEFAULT: 'mqdefault',\n      MAXRESDEFAULT: 'maxresdefault'\n    };\n    this.defaultImageQuality = this.imageQualities.HQDEFAULT;\n    this.mediaTypes = {\n      VIDEO: 'video',\n      PLAYLIST: 'playlist',\n      SHARE: 'share',\n      CHANNEL: 'channel'\n    };\n  }\n\n  YouTube.prototype.parseVideoUrl = function (url) {\n    var match = url.match(/(?:(?:v|vi|be|videos|embed)\\/(?!videoseries)|(?:v|ci)=)([\\w-]{11})/i);\n    return match ? match[1] : undefined;\n  };\n\n  YouTube.prototype.parseChannelUrl = function (url) {\n    // Match an opaque channel ID\n    var match = url.match(/\\/channel\\/([\\w-]+)/);\n\n    if (match) {\n      return {\n        id: match[1],\n        mediaType: this.mediaTypes.CHANNEL\n      };\n    } // Match a vanity channel name or a user name. User urls are deprecated and\n    // currently redirect to the channel of that same name.\n\n\n    match = url.match(/\\/(?:c|user)\\/([\\w-]+)/);\n\n    if (match) {\n      return {\n        name: match[1],\n        mediaType: this.mediaTypes.CHANNEL\n      };\n    }\n  };\n\n  YouTube.prototype.parseParameters = function (params, result) {\n    if (params.start || params.t) {\n      params.start = getTime$5(params.start || params.t);\n      delete params.t;\n    }\n\n    if (params.v === result.id) {\n      delete params.v;\n    }\n\n    if (params.list === result.id) {\n      delete params.list;\n    }\n\n    return params;\n  };\n\n  YouTube.prototype.parseMediaType = function (result) {\n    if (result.params.list) {\n      result.list = result.params.list;\n      delete result.params.list;\n    }\n\n    if (result.id && !result.params.ci) {\n      result.mediaType = this.mediaTypes.VIDEO;\n    } else if (result.list) {\n      delete result.id;\n      result.mediaType = this.mediaTypes.PLAYLIST;\n    } else if (result.params.ci) {\n      delete result.params.ci;\n      result.mediaType = this.mediaTypes.SHARE;\n    } else {\n      return undefined;\n    }\n\n    return result;\n  };\n\n  YouTube.prototype.parse = function (url, params) {\n    var channelResult = this.parseChannelUrl(url);\n\n    if (channelResult) {\n      return channelResult;\n    } else {\n      var result = {\n        params: params,\n        id: this.parseVideoUrl(url)\n      };\n      result.params = this.parseParameters(params, result);\n      result = this.parseMediaType(result);\n      return result;\n    }\n  };\n\n  YouTube.prototype.createShortUrl = function (vi, params) {\n    if (!vi.id || vi.mediaType !== this.mediaTypes.VIDEO) {\n      return undefined;\n    }\n\n    var url = 'https://youtu.be/' + vi.id;\n\n    if (params.start) {\n      url += '#t=' + params.start;\n    }\n\n    return url;\n  };\n\n  YouTube.prototype.createLongUrl = function (vi, params) {\n    var url = '';\n    var startTime = params.start;\n    delete params.start;\n\n    if (vi.mediaType === this.mediaTypes.CHANNEL) {\n      if (vi.id) {\n        url += 'https://www.youtube.com/channel/' + vi.id;\n      } else if (vi.name) {\n        url += 'https://www.youtube.com/c/' + vi.name;\n      } else {\n        return undefined;\n      }\n    } else if (vi.mediaType === this.mediaTypes.PLAYLIST && vi.list) {\n      params.feature = 'share';\n      url += 'https://www.youtube.com/playlist';\n    } else if (vi.mediaType === this.mediaTypes.VIDEO && vi.id) {\n      params.v = vi.id;\n      url += 'https://www.youtube.com/watch';\n    } else if (vi.mediaType === this.mediaTypes.SHARE && vi.id) {\n      params.ci = vi.id;\n      url += 'https://www.youtube.com/shared';\n    } else {\n      return undefined;\n    }\n\n    if (vi.list) {\n      params.list = vi.list;\n    }\n\n    url += combineParams$9(params);\n\n    if (vi.mediaType !== this.mediaTypes.PLAYLIST && startTime) {\n      url += '#t=' + startTime;\n    }\n\n    return url;\n  };\n\n  YouTube.prototype.createEmbedUrl = function (vi, params) {\n    var url = 'https://www.youtube.com/embed';\n\n    if (vi.mediaType === this.mediaTypes.PLAYLIST && vi.list) {\n      params.listType = 'playlist';\n    } else if (vi.mediaType === this.mediaTypes.VIDEO && vi.id) {\n      url += '/' + vi.id; //loop hack\n\n      if (params.loop === '1') {\n        params.playlist = vi.id;\n      }\n    } else {\n      return undefined;\n    }\n\n    if (vi.list) {\n      params.list = vi.list;\n    }\n\n    url += combineParams$9(params);\n    return url;\n  };\n\n  YouTube.prototype.createImageUrl = function (baseUrl, vi, params) {\n    if (!vi.id || vi.mediaType !== this.mediaTypes.VIDEO) {\n      return undefined;\n    }\n\n    var url = baseUrl + vi.id + '/';\n    var quality = params.imageQuality || this.defaultImageQuality;\n    return url + quality + '.jpg';\n  };\n\n  YouTube.prototype.createShortImageUrl = function (vi, params) {\n    return this.createImageUrl('https://i.ytimg.com/vi/', vi, params);\n  };\n\n  YouTube.prototype.createLongImageUrl = function (vi, params) {\n    return this.createImageUrl('https://img.youtube.com/vi/', vi, params);\n  };\n\n  base.bind(new YouTube());\n\n  var combineParams$a = util.combineParams,\n      getTime$6 = util.getTime;\n\n  function SoundCloud() {\n    this.provider = 'soundcloud';\n    this.defaultFormat = 'long';\n    this.formats = {\n      \"long\": this.createLongUrl,\n      embed: this.createEmbedUrl\n    };\n    this.mediaTypes = {\n      TRACK: 'track',\n      PLAYLIST: 'playlist',\n      APITRACK: 'apitrack',\n      APIPLAYLIST: 'apiplaylist'\n    };\n  }\n\n  SoundCloud.prototype.parseUrl = function (url, result) {\n    var match = url.match(/(?:m\\.)?soundcloud\\.com\\/(?:([\\w-]+)\\/(sets\\/)?)([\\w-]+)/i);\n\n    if (!match) {\n      return result;\n    }\n\n    result.channel = match[1];\n\n    if (match[1] === 'playlists' || match[2]) {\n      //playlist\n      result.list = match[3];\n    } else {\n      //track\n      result.id = match[3];\n    }\n\n    return result;\n  };\n\n  SoundCloud.prototype.parseParameters = function (params) {\n    if (params.t) {\n      params.start = getTime$6(params.t);\n      delete params.t;\n    }\n\n    return params;\n  };\n\n  SoundCloud.prototype.parseMediaType = function (result) {\n    if (result.id) {\n      if (result.channel === 'tracks') {\n        delete result.channel;\n        delete result.params.url;\n        result.mediaType = this.mediaTypes.APITRACK;\n      } else {\n        result.mediaType = this.mediaTypes.TRACK;\n      }\n    }\n\n    if (result.list) {\n      if (result.channel === 'playlists') {\n        delete result.channel;\n        delete result.params.url;\n        result.mediaType = this.mediaTypes.APIPLAYLIST;\n      } else {\n        result.mediaType = this.mediaTypes.PLAYLIST;\n      }\n    }\n\n    return result;\n  };\n\n  SoundCloud.prototype.parse = function (url, params) {\n    var result = {};\n    result = this.parseUrl(url, result);\n    result.params = this.parseParameters(params);\n    result = this.parseMediaType(result);\n\n    if (!result.id && !result.list) {\n      return undefined;\n    }\n\n    return result;\n  };\n\n  SoundCloud.prototype.createLongUrl = function (vi, params) {\n    var url = '';\n    var startTime = params.start;\n    delete params.start;\n\n    if (vi.mediaType === this.mediaTypes.TRACK && vi.id && vi.channel) {\n      url = 'https://soundcloud.com/' + vi.channel + '/' + vi.id;\n    } else if (vi.mediaType === this.mediaTypes.PLAYLIST && vi.list && vi.channel) {\n      url = 'https://soundcloud.com/' + vi.channel + '/sets/' + vi.list;\n    } else if (vi.mediaType === this.mediaTypes.APITRACK && vi.id) {\n      url = 'https://api.soundcloud.com/tracks/' + vi.id;\n    } else if (vi.mediaType === this.mediaTypes.APIPLAYLIST && vi.list) {\n      url = 'https://api.soundcloud.com/playlists/' + vi.list;\n    } else {\n      return undefined;\n    }\n\n    url += combineParams$a(params);\n\n    if (startTime) {\n      url += '#t=' + startTime;\n    }\n\n    return url;\n  };\n\n  SoundCloud.prototype.createEmbedUrl = function (vi, params) {\n    var url = 'https://w.soundcloud.com/player/';\n    delete params.start;\n\n    if (vi.mediaType === this.mediaTypes.APITRACK && vi.id) {\n      params.url = 'https%3A//api.soundcloud.com/tracks/' + vi.id;\n    } else if (vi.mediaType === this.mediaTypes.APIPLAYLIST && vi.list) {\n      params.url = 'https%3A//api.soundcloud.com/playlists/' + vi.list;\n    } else {\n      return undefined;\n    }\n\n    url += combineParams$a(params);\n    return url;\n  };\n\n  base.bind(new SoundCloud());\n\n  var combineParams$b = util.combineParams;\n\n  function TeacherTube() {\n    this.provider = 'teachertube';\n    this.alternatives = [];\n    this.defaultFormat = 'long';\n    this.formats = {\n      \"long\": this.createLongUrl,\n      embed: this.createEmbedUrl\n    };\n    this.mediaTypes = {\n      VIDEO: 'video',\n      AUDIO: 'audio',\n      DOCUMENT: 'document',\n      CHANNEL: 'channel',\n      COLLECTION: 'collection',\n      GROUP: 'group'\n    };\n  }\n\n  TeacherTube.prototype.parse = function (url, params) {\n    var result = {};\n    result.list = this.parsePlaylist(params);\n    result.params = params;\n    var match = url.match(/\\/(audio|video|document|user\\/channel|collection|group)\\/(?:[\\w-]+-)?(\\w+)/);\n\n    if (!match) {\n      return undefined;\n    }\n\n    result.mediaType = this.parseMediaType(match[1]);\n    result.id = match[2];\n    return result;\n  };\n\n  TeacherTube.prototype.parsePlaylist = function (params) {\n    if (params['playlist-id']) {\n      var list = params['playlist-id'];\n      delete params['playlist-id'];\n      return list;\n    }\n\n    return undefined;\n  };\n\n  TeacherTube.prototype.parseMediaType = function (mediaTypeMatch) {\n    switch (mediaTypeMatch) {\n      case 'audio':\n        return this.mediaTypes.AUDIO;\n\n      case 'video':\n        return this.mediaTypes.VIDEO;\n\n      case 'document':\n        return this.mediaTypes.DOCUMENT;\n\n      case 'user/channel':\n        return this.mediaTypes.CHANNEL;\n\n      case 'collection':\n        return this.mediaTypes.COLLECTION;\n\n      case 'group':\n        return this.mediaTypes.GROUP;\n    }\n  };\n\n  TeacherTube.prototype.createLongUrl = function (vi, params) {\n    if (!vi.id) {\n      return undefined;\n    }\n\n    var url = 'https://www.teachertube.com/';\n\n    if (vi.list) {\n      params['playlist-id'] = vi.list;\n    }\n\n    if (vi.mediaType === this.mediaTypes.CHANNEL) {\n      url += 'user/channel/';\n    } else {\n      url += vi.mediaType + '/';\n    }\n\n    url += vi.id;\n    url += combineParams$b(params);\n    return url;\n  };\n\n  TeacherTube.prototype.createEmbedUrl = function (vi, params) {\n    if (!vi.id) {\n      return undefined;\n    }\n\n    var url = 'https://www.teachertube.com/embed/';\n\n    if (vi.mediaType === this.mediaTypes.VIDEO || vi.mediaType === this.mediaTypes.AUDIO) {\n      url += vi.mediaType + '/' + vi.id;\n    } else {\n      return undefined;\n    }\n\n    url += combineParams$b(params);\n    return url;\n  };\n\n  base.bind(new TeacherTube());\n\n  var combineParams$c = util.combineParams;\n\n  function TikTok() {\n    this.provider = 'tiktok';\n    this.defaultFormat = 'long';\n    this.formats = {\n      \"long\": this.createLongUrl\n    };\n    this.mediaTypes = {\n      VIDEO: 'video'\n    };\n  }\n\n  TikTok.prototype.parse = function (url, params) {\n    var result = {\n      params: params,\n      mediaType: this.mediaTypes.VIDEO\n    };\n    var match = url.match(/@([^/]+)\\/video\\/(\\d{19})/);\n\n    if (!match) {\n      return;\n    }\n\n    result.channel = match[1];\n    result.id = match[2];\n    return result;\n  };\n\n  TikTok.prototype.createLongUrl = function (vi, params) {\n    var url = '';\n\n    if (vi.mediaType === this.mediaTypes.VIDEO && vi.id && vi.channel) {\n      url += \"https://www.tiktok.com/@\".concat(vi.channel, \"/video/\").concat(vi.id);\n    } else {\n      return undefined;\n    }\n\n    url += combineParams$c(params);\n    return url;\n  };\n\n  base.bind(new TikTok());\n\n  var combineParams$d = util.combineParams;\n\n  function Ted() {\n    this.provider = 'ted';\n    this.formats = {\n      \"long\": this.createLongUrl,\n      embed: this.createEmbedUrl\n    };\n    this.mediaTypes = {\n      VIDEO: 'video',\n      PLAYLIST: 'playlist'\n    };\n  }\n\n  Ted.prototype.parseUrl = function (url, result) {\n    var match = url.match(/\\/(talks|playlists\\/(\\d+))\\/([\\w-]+)/i);\n    var channel = match ? match[1] : undefined;\n\n    if (!channel) {\n      return result;\n    }\n\n    result.channel = channel.split('/')[0];\n    result.id = match[3];\n\n    if (result.channel === 'playlists') {\n      result.list = match[2];\n    }\n\n    return result;\n  };\n\n  Ted.prototype.parseMediaType = function (result) {\n    if (result.id && result.channel === 'playlists') {\n      delete result.channel;\n      result.mediaType = this.mediaTypes.PLAYLIST;\n    }\n\n    if (result.id && result.channel === 'talks') {\n      delete result.channel;\n      result.mediaType = this.mediaTypes.VIDEO;\n    }\n\n    return result;\n  };\n\n  Ted.prototype.parse = function (url, params) {\n    var result = {\n      params: params\n    };\n    result = this.parseUrl(url, result);\n    result = this.parseMediaType(result);\n\n    if (!result.id) {\n      return undefined;\n    }\n\n    return result;\n  };\n\n  Ted.prototype.createLongUrl = function (vi, params) {\n    var url = '';\n\n    if (vi.mediaType === this.mediaTypes.VIDEO && vi.id) {\n      url += 'https://ted.com/talks/' + vi.id;\n    } else if (vi.mediaType === this.mediaTypes.PLAYLIST && vi.id) {\n      url += 'https://ted.com/playlists/' + vi.list + '/' + vi.id;\n    } else {\n      return undefined;\n    }\n\n    url += combineParams$d(params);\n    return url;\n  };\n\n  Ted.prototype.createEmbedUrl = function (vi, params) {\n    var url = 'https://embed.ted.com/';\n\n    if (vi.mediaType === this.mediaTypes.PLAYLIST && vi.id) {\n      url += 'playlists/' + vi.list + '/' + vi.id;\n    } else if (vi.mediaType === this.mediaTypes.VIDEO && vi.id) {\n      url += 'talks/' + vi.id;\n    } else {\n      return undefined;\n    }\n\n    url += combineParams$d(params);\n    return url;\n  };\n\n  base.bind(new Ted());\n\n  var combineParams$e = util.combineParams;\n\n  function Facebook() {\n    this.provider = 'facebook';\n    this.alternatives = [];\n    this.defaultFormat = 'long';\n    this.formats = {\n      \"long\": this.createLongUrl,\n      watch: this.createWatchUrl\n    };\n    this.mediaTypes = {\n      VIDEO: 'video'\n    };\n  }\n\n  Facebook.prototype.parse = function (url, params) {\n    var result = {\n      params: params,\n      mediaType: this.mediaTypes.VIDEO\n    };\n    var match = url.match(/(?:\\/(\\d+))?\\/videos(?:\\/.*?)?\\/(\\d+)/i);\n\n    if (match) {\n      if (match[1]) {\n        result.pageId = match[1];\n      }\n\n      result.id = match[2];\n    }\n\n    if (params.v && !result.id) {\n      result.id = params.v;\n      delete params.v;\n      result.params = params;\n    }\n\n    if (!result.id) {\n      return undefined;\n    }\n\n    return result;\n  };\n\n  Facebook.prototype.createWatchUrl = function (vi, params) {\n    var url = 'https://facebook.com/watch/';\n\n    if (vi.mediaType !== this.mediaTypes.VIDEO || !vi.id) {\n      return undefined;\n    }\n\n    params = {\n      v: vi.id\n    };\n    url += combineParams$e(params);\n    return url;\n  };\n\n  Facebook.prototype.createLongUrl = function (vi, params) {\n    var url = 'https://facebook.com/';\n\n    if (vi.pageId) {\n      url += vi.pageId;\n    } else {\n      return undefined;\n    }\n\n    if (vi.mediaType === this.mediaTypes.VIDEO && vi.id) {\n      url += '/videos/' + vi.id;\n    } else {\n      return undefined;\n    }\n\n    url += combineParams$e(params);\n    return url;\n  };\n\n  base.bind(new Facebook());\n\n  var lib = base;\n\n  return lib;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../../node_modules/js-video-url-parser/dist/jsVideoUrlParser.js\n");

/***/ })

}]);